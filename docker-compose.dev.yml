services:
  # Serviço para o Barber Master (Aplicação Principal) em desenvolvimento
  barber-master:
    build:
      context: .  # Define o contexto de build para a raiz do projeto
      dockerfile: Dockerfile  # Agora o Dockerfile está na raiz do projeto
      target: builder
    ports:
      - ${PORT_BARBER_MASTER}:${PORT_BARBER_MASTER}  # Mapeia a porta do container para a porta da máquina host
    environment:
      - PORT_BARBER_MASTER=${PORT_BARBER_MASTER}  # Definindo a variável de ambiente para a porta
      - NODE_ENV=development  # Modo de desenvolvimento
      - POSTGRES_HOST=${POSTGRES_HOST}  # Configuração do banco de dados
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./src:/app/src  # Mapeia o código-fonte local para o container (pasta src)
      - /app/node_modules  # Mantém os node_modules no container

    command: npm run start:dev  # Comando padrão do NestJS para iniciar o servidor em modo desenvolvimento
    networks:
      - app-network
    depends_on:
      - postgres

  # Serviço PostgreSQL
  postgres:
    image: postgres:latest
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}  # Mapeia a porta do PostgreSQL
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data  # Volume para persistir os dados do banco
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]  # Verifica a saúde do banco
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

networks:
  app-network:
    driver: bridge  # Define a rede para os containers se comunicarem

volumes:
  postgres-data: {}  # Define um volume para armazenar os dados do PostgreSQL
