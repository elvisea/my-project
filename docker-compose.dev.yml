services:
  # Serviço para o My App (Aplicação Principal) em desenvolvimento
  my-app:
    build:
      context: .  
      dockerfile: apps/my-app/Dockerfile
      target: builder  
    ports:
       - ${PORT_MY_APP}:${PORT_MY_APP}
    environment:
      - PORT_MY_APP=${PORT_MY_APP}
      - NODE_ENV=development
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./apps/my-app:/app/apps/my-app
      - /app/apps/my-app/node_modules
    command: npm run start:my-app:dev
    networks:
      - app-network
    depends_on:
      - postgres

  # Serviço para o My Project (Projeto Secundário) em desenvolvimento
  my-project:
    build:
      context: .  
      dockerfile: apps/my-project/Dockerfile
      target: builder
    ports:
      - ${PORT_MY_PROJECT}:${PORT_MY_PROJECT}
    environment:
      - PORT_MY_PROJECT=${PORT_MY_PROJECT}
      - NODE_ENV=development
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./apps/my-project:/app/apps/my-project
      - /app/apps/my-project/node_modules
    command: npm run start:my-project:dev
    networks:
      - app-network
    depends_on:
      - postgres

  # Serviço PostgreSQL
  postgres:
    image: postgres:latest
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data: {}
